---
title: "Application Exercise 12 - Data wrangling with dplyr"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  message: false
  warning: false
---

```{r}

library(dplyr)
library(ggplot2)

```

# Data

## Explore data

We are using a dataset that is stored in the `dplyr` R Package. The object is titled `starwars` and is available to use by loading the `dplyr` R Package.

```{r}


```

# Data wrangling with dplyr

The `dplyr` R Paclage aims to provide a function for each basic verb of data manipulation. These verbs can be organised into three categories based on the component of the dataset that they work with:

-   Rows
-   Columns
-   Groups of rows

## Rows

### dplyr::filter()

The function `filter()` chooses rows based on column values. To use filtering effectively, you have to know how to select the observations that you want using the comparison operators. R provides the standard suite: `>`, `>=`, `<`, `<=`, `!=` (not equal), and `==` (equal).

```{r}


```

### dplyr::arrange()

The function `arrange()` changes the order of the rows.

```{r}


```

### dplyr::slice()

The function `slice()` chooses rows based on location.

```{r}



```

## Columns

### dplyr::select()

The function `select()` picks variables based on their names.

```{r}


```

Helpers select variables by matching patterns in their names:

-   `starts_with()`: Starts with a prefix.
-   `ends_with()`: Ends with a suffix.
-   `contains()`: Contains a literal string.

Learn more: https://dplyr.tidyverse.org/reference/select.html

### dplyr::rename()

The function `rename()` changes the name of columns.

```{r}


```

### dplyr::relocate()

The function `relocate()` changes the order of the columns.

```{r}



```

### dplyr::mutate()

The function `mutate()` changes the values of columns and creates new columns.

```{r}


```

### dplyr::case_when()

**Goal:** Create a categorical variable based on a continuous numerical variable.

```{r}



```

#### Factors

Categorical variables that have a natural order (ordinal variables) need to be transformed into variable of type factor. They are stored as variables of type character, of which the order is always alphabetical.

```{r}



```

## Groups of rows

### dplyr::summarise()

```{r}



```

Learn more about column-wise operations: https://dplyr.tidyverse.org/articles/colwise.html

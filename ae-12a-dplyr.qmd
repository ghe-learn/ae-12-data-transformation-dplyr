---
title: "Application Exercise 12 - Data wrangling with dplyr"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  message: false
  warning: false
---

```{r}

library(dplyr)
library(skimr)
library(ggplot2)

```

# Data

## Explore data

We are using a dataset that is stored in the `dplyr` R Package. The object is titled `starwars` and is available to use by loading the `dplyr` R Package.

```{r}

glimpse(starwars)
starwars

```

# Data wrangling with dplyr

The `dplyr` R Paclage aims to provide a function for each basic verb of data manipulation. These verbs can be organised into three categories based on the component of the dataset that they work with:

-   Rows
-   Columns
-   Groups of rows

## Rows

### dplyr::filter()

The function `filter()` chooses rows based on column values. To use filtering effectively, you have to know how to select the observations that you want using the comparison operators. R provides the standard suite: \>, \>=, \<, \<=, != (not equal), and == (equal).

```{r}

starwars %>% 
  filter(species == "Human")

starwars %>% 
  filter(species == "Human", homeworld == "Tatooine")

starwars %>% 
  filter(eye_color == "yellow" |  eye_color == "red" | eye_color == "pink")

starwars %>% 
  filter(eye_color %in% c("yellow", "red", "pink"))

starwars %>% 
  filter(homeworld != "Naboo") 

starwars %>% 
  filter(height < 150)

starwars %>% 
  filter(height <= 150)
```

### dplyr::arrange()

The function `arrange()` changes the order of the rows.

```{r}

starwars %>% 
  arrange(mass)

starwars %>% 
  arrange(desc(mass))

starwars %>% 
  arrange(mass, height) 

```

### dplyr::slice()

The function `slice()` chooses rows based on location.

```{r}

starwars %>% 
  slice(1)

starwars %>% 
  slice(-1)

starwars %>% 
  slice(5:10)

starwars %>% 
  slice_sample(n = 10)

starwars %>%
  slice_max(height, n = 5)

starwars %>% 
  slice_min(mass, n = 3)

```

## Columns

### dplyr::select()

The function `select()` picks variables based on their names.

```{r}

starwars %>% 
  select(name, hair_color, skin_color, eye_color)

starwars %>% 
  select(name, hair_color:eye_color)

starwars %>% 
  select(name, !(hair_color:eye_color))

starwars %>% 
  select(name, ends_with("color"))

```

Helpers select variables by matching patterns in their names:

-   `starts_with()`: Starts with a prefix.
-   `ends_with()`: Ends with a suffix.
-   `contains()`: Contains a literal string.

Learn more: https://dplyr.tidyverse.org/reference/select.html

### dplyr::rename()

The function `rename()` changes the name of columns.

```{r}

starwars %>% 
  rename(home_world = homeworld) %>% 
  rename(full_name = name)

```

### dplyr::relocate()

The function `relocate()` changes the order of the columns.

```{r}

starwars %>% 
  relocate(species)

starwars %>% 
  relocate(species, .after = name)

starwars %>% 
  relocate(species, .before = mass)

starwars %>% 
  relocate(gender:species, .after = mass)

```

### dplyr::mutate()

The function `mutate()` changes the values of columns and creates new columns.

```{r}

starwars %>% 
  mutate(height_m = height / 100) %>% 
  relocate(height_m, .after = height)

```

### dplyr::case_when()

**Goal:** Create a categorical variable based on a continuous numerical variable.

```{r}

starwars_height_cat <- starwars %>% 
  mutate(height_cat = case_when(
    height >= 190 ~ "tall",
    height < 190 & height >= 160 ~ "medium",
    height < 160 ~ "short"
  )) %>% 
  relocate(height_cat, .after = height) %>% 
  # only write after showing plot with NAs
  # Introduce concept of removing NAs
  filter(!is.na(height))

# Plot data to highlight the order of bars?

ggplot(data = starwars_height_cat,
       mapping = aes(x = height_cat)) +
  geom_bar()

```

#### Factors

Categorical variables that have a natural order (ordinal variables) need to be transformed into variable of type factor. They are stored as variables of type character, of which the order is always alphabetical.

```{r}
# What is with the order?

height_levels <- c("short", "medium", "tall")

starwars_height_cat_fct <- starwars_height_cat %>% 
  mutate(height_cat_fct = factor(height_cat, levels = height_levels)) %>% 
  relocate(height_cat_fct, .after = height_cat)

ggplot(data = starwars_height_cat_fct,
       mapping = aes(x = height_cat_fct)) +
  geom_bar()

```

## Groups of rows

### dplyr::summarise()

```{r}

# How does summarise work

starwars %>% 
  summarise()

starwars %>% 
  summarise(height = mean(height))

starwars %>% 
  summarise(height = mean(height, na.rm = TRUE))

starwars %>% 
  summarise(height = mean(height, na.rm = TRUE),
            count = n())

starwars %>% 
  filter(!is.na(height)) %>% 
  summarise(height = mean(height),
            count = n())

# Summarise works well with group_by (frequency tables)

starwars_height_cat %>% 
  group_by(height_cat) %>% 
  summarise(
    count = n()
  )

## Shortcut

starwars_height_cat %>% 
  count(height_cat)

## Factor order

starwars_height_cat_fct %>% 
  count(height_cat_fct)

## Table grouped by two variables

starwars_height_cat_fct %>% 
  #tidyr::drop_na(height_cat_fct, sex) %>% 
  count(height_cat_fct, sex)

starwars %>% 
  #filter(!is.na(sex)) %>% 
  tidyr::drop_na(sex, height) %>% 
  group_by(sex) %>% 
  summarise(count = n(),
            mean_height = mean(height),
            sd_height = sd(height),
            median_height = median(height))

# Working across several columns

starwars %>% 
  tidyr::drop_na(sex, height, mass, birth_year) %>% 
  group_by(sex) %>% 
  summarise(across(c(height, mass, birth_year), mean))

```

Learn more about column-wise operations: https://dplyr.tidyverse.org/articles/colwise.html

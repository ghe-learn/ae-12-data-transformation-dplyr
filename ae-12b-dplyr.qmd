---
title: "Application Exercise 12 - Data wrangling with dplyr"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  message: false
  warning: false
---

# Note!

## Task descriptions and starter code

You will notice that the descriptions of tasks are getting shorter with less detail provided. This is the case for all functions you have previously practised either in your homework or in live coding exercises in class. Tasks that are **fill in the blanks** exercises will also decrease.

## Final exam

Pay close attention to how the tasks are phrased, as this closer to how they will be phrased in in the final exam. For most tasks in the final exam, exercises won't have starter code or be **fill in the blanks** exercises.

Studying for the exam means practising writing code now. You currently have three options to do that:

-   Programming assignments exercises like this
-   The R4DS book and your notebook repository
-   Your research project report

You must write as much code independently as you can. While we realise that homework assignments can be copied from other classmates, it is to your disadvantage if you do so. You will not have an opportunity to practice writing code independently, which you will need to be able to do for the final exam.

# Task 0: Load R packages

**Note:** I have already created code-chunks for you through this assignment. 

1.  Load the `dplyr`, `readr`, and `ggplot2` R Packages.

```{r}
library(dplyr)
library(readr)
library(ggplot2)
```

# Task 1: Data import

1.  Use the `read_csv()` function to import the 'country_level_data_0.csv' file by assigning it to an object name `global_waste_data`

```{r}


```

# Task 2: Data tidying

## dplyr::select()

### Part 1

**Fill in the blanks**

1.  Start with the `global_waste_data` object and use the `select()` function to create a subset that only keeps the following variables:

-   `iso3c`
-   all variables that end with "percent"

2.  Run the code contained in the code-chunk and fix any errors

3.  Next to the code-chunk option `#| eval:` change the value from `false` to `true`

4.  Render and fix any errors

```{r}
#| eval: false

global_waste_data %>% 
  ___(___, ends_with("___"))
```

### Part 2

**Write the code yourself**

1.  Start with the `global_waste_data` object and use the `select()` function to create a subset that only keeps the following variables:

-   `country_name`
-   `income_id`
-   `total_msw_total_msw_generated_tons_year`
-   `population_population_number_of_people`
-   all variables starting with "composition"

2.  Store the subset as a new object in your environment with the name `composition`

3.  Render and fix any errors

```{r}



```

### Part 3

**Write the code yourself**

1.  Start with the `composition` object and use the `rename()` function to rename all columns that start with "composition". Shorten the names to keep the waste category only (e.g. rename `composition_food_organic_waste_percent` to `food_organic_waste`)

2.  Rename `total_msw_total_msw_generated_tons_year` to `msw_tons_year`.

3.  Rename `population_population_number_of_people` to `population`

4.  Store the subset as a new object in your environment with the name `composition_tidy`

5.  Render and fix any errors

6.  Commit your changes

```{r}



```

# Task 3: Data transformation

## dplyr::filter()

### Part 1

**Fill in the blanks**

1.  Use the `filter()` function in combination with `is.na()` to create a subset from `composition_tidy` containing observations for countries with missing data for the variable which has percentages on food and organic waste.

2.  Next to the code-chunk option `#| eval:` change the value from `false` to `true`

```{r}
#| eval: false

___ %>%  
  ___(is.na(___))

```

### Part 2

**Write the code yourself**

1.  Use the `filter()` to create a subset from `composition_tidy` containing observations for countries classified as high-income countries (HIC).

```{r}



```

### Part 3

**Write the code yourself**

1.  Use the `filter()` to create a subset from `composition_tidy` containing observations for countries that are not classified as low-income countries (LIC).

```{r}


```

### Part 4

**Write the code yourself**

1.  Create a subset from `composition_tidy` containing observations for countries classified as high-income countries (HIC) and with food and organic waste composition greater than 50%.

```{r}


```

### Part 5

**Write the code yourself**

1.  Create a subset from `composition_tidy` containing observations for countries classified as high-income countries or low-income countries and with other waste composition greater than 40%.

```{r}


```

### Part 6

**Write the code yourself**

1.  Create a subset from `composition_tidy` containing observations for countries named Switzerland, Guam, Costa Rica, Angola, or Kiribati.

2.  Render and fix any errors

3.  Commit your changes

```{r}



```

## dplyr::mutate() & dplyr::relocate()

**Write the code yourself**

1.  Use the `mutate()` function to add a new column to `composition_tidy` that is the municipal solid waste generation per capita in kg/year. Name the column `msw_capita_kg_year`.

2.  Use the pipe operator to add another line of code which uses the `relocate()` function to move the `msw_capita_kg_year` after the column `msw_tons_year` column.

3.  Store the result as a new object in your environment with the name `composition_tidy_capita`

4.  Render and fix any errors

5.  Commit your changes

```{r}



```

## dplyr::mutate() & dplyr::case_when()

**Fill in the blanks**

1.  Use the `mutate()` function to add a new column named `income_cat` to `composition_tidy_capita` that is a variable which contains the unabbreviated categories for the `income_id` variable.

2.  Use the `case_when()` function to convert the abbreviated values in `income_id` to:

-   "high income" if `income_id` is "HIC"
-   "upper-middle income" if `income_id` is "UMC"
-   "lower-middle income" if `income_id` is "LMC"
-   "low income" if `income_id` is "UMC"

**Note:** Pay close attention to spaces and hyphens.

3.  Use the pipe operator to add another line of code which uses the `mutate()` function to convert the `income_cat` variable from a variable of type character to a variable of type factor. For the factor levels, use the provided `levels_income_cat` object.

4.  Use the pipe operator to add another line of code which uses the `relocate()` function to move the `income_cat` after the `income_id` column.

5. Execute the code and inspect the output in the Console. Pay special attention to the `income_id` and `income_cat` variables. Do you see what you would expect?

5.  Store the result as a new object in your environment with the name `composition_tidy_capita_income_cat`

6.  Render and fix any errors

7.  Commit your changes

```{r}
#| eval: false

# the following object 'levels_income_cat` creates a vector with a defined order
# to convert the 'income_cat' variable into a variable of type factor

levels_income_cat <- c("high income", 
                       "upper-middle income",
                       "lower-middle income",
                       "low income")

# Code-chunk to full in the blanks

composition_tidy_capita_income_cat <- composition_tidy_capita %>% 
  ___(income_cat = ___ (
    ___ == "HIC" ~ "___",
    income_id == "___" ~ "upper-middle income",
    ___ == "___" ~ "lower-middle income",
    income_id == "___" ~ "___"
  )) %>% 
  mutate(income_cat = factor(income_cat, levels = ___)) %>% 
  ___(income_cat, .after = ___) 
  

```

## dplyr::group_by() & dplyr::summarise()

Thank you for working through the previous tasks. I am convinced that you have done a great job, but because my task descriptions aren't always unambiguous, I have imported the data that I would have expected to be created and stored in `composition_tidy_capita_income_cat` at the previous code-chunk. This is to ensure that you can work through the following tasks more smoothly.

```{r}
composition_tidy_capita_income_cat <- read_rds("data/intermediate_data/01-msw-generation-and-composition-by-income.rds")
```

### Part 1

**Fill in the blanks**

1. Starting with `composition_tidy_capita_income_cat`, group the data by `income_id`, then create a summary table containing the number of observations (call this count) for each group.

2.  Next to the code-chunk option `#| eval:` change the value from `false` to `true`

```{r}
#| eval: false

composition_tidy_capita_income_cat %>% 
  group_by(___) %>% 
  summarise(___ = n())

```

**Write the code yourself**

1. Starting with `composition_tidy_capita_income_cat`, group the data by `income_cat`, then create a summary table containing the number of observations (call this count) for each group.

2. Observe the output in the Console and describe the difference to the output of the previous code-chunk.

```{r}


```

**Fill in the blanks**

1. Starting with `composition_tidy_capita_income_cat`, group the data by `income_cat`, then create a summary table containing the number of observations (call this count) and mean Municipal Solid Waste (MSW) generation (variable `msw_capita_kg_year`) and call this mean_msw_total.

2. Execute the code and observe the output in the Console.

3. Why do you see `NA` for mean_msw_total at "high income"?

4. Remove the `#` at the row starting with `tidyr::`. 

5. Execute the code and observe the output in the Console. What has changed? How is that different to adding `na.rm = TRUE` as an argument to the `mean()`

6.  Next to the code-chunk option `#| eval:` change the value from `false` to `true`

```{r}
#| eval: false

composition_tidy_capita_income_cat %>% 
  # tidyr::drop_na(msw_capita_kg_year) %>% 
  ___(income_cat) %>% 
  ___(
    count = ___,
    mean_msw_total = ___(msw_capita_kg_year)
  )

```

**Write the code yourself**

1. Starting with `composition_tidy_capita_income_cat`, group the data by `income_cat`, then create a summary table containing the number of observations (call this count) and mean, median, and standard deviation of MSW generation (call these mean, median, sd).

2. Ensure that the summary table contains no `NA` by removing rows with `NA` before summarising the data.

3. Store the summary tableas a new object in your environment with the name `table_msw_generation`

```{r}



```

**Write the code yourself**

1. Starting with `composition_tidy_capita_income_cat`, group the data by `income_cat`, then create a summary table containing the number of observations (call this count), mean MSW generation (call this mean_msw_total), mean food and organic waste composition (call this mean_organic), mean plastic waste composition (call this mean_plastic), mean paper and cardboard waste (call this mean_paper_cardboard).

2. Ensure that the summary table contains no `NA` by removing rows with `NA` before summarising the data.

3. Store the summary tableas a new object in your environment with the name `table_composition`

4.  Render and fix any errors

5.  Commit your changes

```{r}


```

# Task 4: Data visualisations

Below, you will see three types of already prepared plots. There is nothing to write here for you, but the plots provide you with some additional code examples for plots.

1. Execute each code-chunk and observe how the plot in the Plots pane relates to the code.

## Histograms

```{r}
ggplot(data = composition_tidy_capita_income_cat,
       mapping = aes(x = food_organic_waste, fill = income_cat)) +
  geom_histogram()
```

```{r}
ggplot(data = composition_tidy_capita_income_cat,
       mapping = aes(x = plastic, fill = income_cat)) +
  geom_histogram()
```

```{r}
ggplot(data = composition_tidy_capita_income_cat, 
       mapping = aes(x = paper_cardboard)) +
  geom_histogram() +
  facet_wrap(~income_cat)
```

```{r}
ggplot(data = composition_tidy_capita_income_cat,
       mapping = aes(x = other)) +
  geom_histogram() +
  facet_wrap(~income_cat)
```

## Scatterplot

```{r}

ggplot(data = composition_tidy_capita_income_cat,
       mapping = aes(x = msw_capita_kg_year, 
                     y = food_organic_waste,
                     color = income_cat)) +
  geom_point()

```

## Boxplot

```{r}

ggplot(data = composition_tidy_capita_income_cat,
       mapping = aes(income_cat,
                     y = msw_capita_kg_year,
                     color = income_cat)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 2/4)


```

# Task 5: Tables

The [`gt` R Package](https://gt.rstudio.com/index.html) is an extremely powerful package to style tables. Learning the details of how it works is beyond scope of this course, but below is an example for the `table_composition` table that we created when we summarised our data.

1.  Execute the following two code-chunks
2.  Read the code, observe the output in the Viewer pane, and describe in your own words what each function does

-   `gt()`:
-   `tab_header()`:
-   `fmt_number()`:
-   `starts_with()`:
-   `cols_labels()`:

```{r}
# As previously, I have stored the data that I would have expected for the 
# table_composition object and import it here, so that you can get the following
# code to work as I intended.

table_composition <- read_rds("data/intermediate_data/03-table-composition.rds")
table_msw_generation <-  read_rds("data/intermediate_data/02-table-msw-generation.rds")

```


```{r}

library(gt)

table_composition %>% 
  gt() %>%
  tab_header(
    title = "Municipal Solid Waste by Income",
    subtitle = "Average generation and composition for three waste categories") %>% 
  fmt_number(
    columns = starts_with("mean"), 
    decimals = 1
  ) %>% 
  cols_label(
    income_cat = "Income category",
    count = "number of countries (n)",
    mean_msw_total = "MSW generation per capita (kg/year)",
    mean_organic = "food & organic (%)",
    mean_plastic = "plastic (%)",
    mean_paper_cardboard = "paper & cardboard (%)"
  ) 

```

Below is another table for the report that uses the `knitr` R Package to style the table. Columns first need to be renamed with the `rename()` function, and because the column names have spaces in them, we need to add the single backtick around the column/variable name. The result is also satisying and often all you need to prepare a sound looking table for your report. A great extension to `knitr` is the [`kableExtra` R Package](https://haozhu233.github.io/kableExtra/).

1.  Read the code and describe in your own words what each function does

-   `rename()`:
-   `knitr::kable()`:

```{r}

table_msw_generation %>% 
  rename(`income category` = income_cat) %>% 
  rename(`number of countries (n)` = count) %>% 
  knitr::kable(digits = 1)

```

# Task 6: Complete assignment

1.  Render and fix any errors
2.  Commit your changes (make sure your Git pane is empty)
3.  Push to GitHub
4.  Open an issue on the repo for this exercise to let us know you completed it. Use the @larnsce mention.
